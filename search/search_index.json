{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Posts","text":""},{"location":"about/","title":"About","text":"<p>Just a basic about page.</p> <p>Here is my Curriculum Vitae in German tho</p>"},{"location":"2020/04/13/git-commands/","title":"Useful Git Commands","text":"<p>Just a collection of useful git commands.</p> <pre><code>git commit --amend --no-edit\n</code></pre> <p>The <code>no-edit</code> flag will allow you to make the amendment to your commit without changing its commit message. You need to force push if already pushed to a remote.</p> <pre><code>git push -f origin master\n</code></pre>","tags":["Git","Gitlab"]},{"location":"2020/04/13/git-large-files/","title":"Locating and Removing Large Files from Git History","text":"<p>This article is about checking your Git history for large files and removing them if they got pushed accidentially because Git histories should not include large binaries, artifacts, videos or alike. There are other tools like DVC or git-lfs for versioning big files or datasets.</p>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#check-your-repo-for-large-files","title":"Check your repo for large files","text":"","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#on-linux","title":"On Linux","text":"<pre><code>git rev-list --objects --all \\\n | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \\\n | sed -n 's/^blob //p' \\\n | sort --numeric-sort --key=2 \\\n | gcut -c 1-12,41- \\\n| $(command -v gnumfmt || echo gnumfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n</code></pre>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#on-mac","title":"On Mac","text":"<pre><code>brew install coreutils\n</code></pre> <p>For Mac one has to adapt the command by changing <code>cut</code> to <code>gcut</code> and <code>numfmt</code> to <code>gnumfmt</code></p> <pre><code>git rev-list --objects --all \\\n | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \\\n | sed -n 's/^blob //p' \\\n | sort --numeric-sort --key=2 \\\n | gcut -c 1-12,41- \\\n| $(command -v gnumfmt || echo gnumfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n</code></pre>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#add-as-alias","title":"Add as alias","text":"<p>Add this to your <code>~/.bash_profile</code> or <code>~/.bashrc</code> :</p> <pre><code>if [ -f ~/.bash_aliases ]; then\n. ~/.bash_aliases\nfi\n</code></pre> <p>Create or add to your <code>~/.bash_aliases</code>:</p> <pre><code>  alias git_large=\"git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | gcut -c 1-12,41-  | $(command -v gnumfmt || echo gnumfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\"\n</code></pre> <p></p>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#remove-big-files-and-force-push","title":"Remove big files and force push","text":"","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#option-1-not-preferred","title":"Option 1 (not preferred)","text":"<p>``` git filter-branch --index-filter 'git rm --cached --ignore-unmatch file1 file2' HEAD</p> <p>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</p> <pre><code>\n   ```\ngit push --force\n</code></pre> <p></p>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/git-large-files/#option-2","title":"Option 2","text":"<p>Get BFG-repo-cleaner:</p> <pre><code>git clone https://github.com/rtyley/bfg-repo-cleaner.git\n</code></pre> <p>or </p> <pre><code>brew install bfg\n</code></pre> <p>Cleanup unnecessary files and optimize the local repository:</p> <pre><code>git gc\n</code></pre> <p>Delete all files from history which are bigger than 10 Megabytes:</p> <pre><code>dfg --strip-blobs-bigger-than 10M .git\n</code></pre> <p>or</p> <pre><code>java -jar ~/opt/bfg-1.13.0.jar --strip-blobs-bigger-than 10M .git\n</code></pre> <p>Reflect your changes:</p> <pre><code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive\n</code></pre> <p>Push to remote (\"with-lease\" =&gt; this will fail if someone updated the HEAD of the master branch):</p> <pre><code>git push origin master --force-with-lease\n</code></pre> <p>In Gitlab go into the <code>Settings &gt; Repository &gt; Repository cleanup</code> and upload the <code>object-id-map.old-new.txt</code> file, located in the <code>.git.bfg-report</code>-folder</p> <p>Done!</p>","tags":["Git","Gitlab","Linux","Mac"]},{"location":"2020/04/13/hugo-blog/","title":"Setting up Personal Blog with Hugo (Go)","text":"<ol> <li>Install GO on your machine and edit your PATH variable. Add this to your .bashrc or .zshrc:</li> </ol> <pre><code>export GOPATH=\"${HOME}/.go\"\nexport GOROOT=\"$(brew --prefix golang)/libexec\"\nexport PATH=\"$PATH:${GOPATH}/bin:${GOROOT}/bin\"\n</code></pre> <p>and use brew to install go and some dev tools (optional):   </p> <pre><code>brew install go\n\ngo get golang.org/x/tools/cmd/godoc\n\ngo get github.com/golang/lint/golint\n</code></pre> <ol> <li>Install hugo:</li> </ol> <pre><code>brew install hugo\n</code></pre> <ol> <li>Create a new hugo website:</li> </ol> <pre><code>hugo new site example-blog\n</code></pre> <ol> <li>Add a theme of your choice, this site uses <code>hugo-goa</code></li> </ol> <pre><code>mkdir -p themes\ncd themes\ngit clone https://github.com/shenoybr/hugo-goa\n</code></pre> <ol> <li>Check out the config.toml examples of the theme and customize your own config. My config as example:</li> </ol> <pre><code>## Basic Configuration\n\nbaseurl = \"https://jan.lwenstrom.net/\"\nbuilddrafts = false\ncanonifyurls = false\nlanguageCode = \"en-US\"\n\ncontentdir = \"content\"\nlayoutdir = \"layouts\"\npublishdir = \"public\"\n\nauthor = \"Jan L\u00f6wenstrom\"\ntitle = \"Jan L\u00f6wenstrom\"\n\ntheme = \"hugo-goa\"\n\n## Hugo Built-in Features\n# disqusShortname = \"https-shenoybr-github-io-hugo-goa-demo\" # Comment out to disable Disqus.\ngoogleAnalytics = \"XYZ\"\nenableRobotsTXT = true\n\n## Site Settings\n[params]\nauthor = \"Jan L\u00f6wenstrom\"\nintro = \"Software Engineer\"\ndescription = \"Ah ja!\"\nauthorimage = \"headshot.png\"\ndateformat = \"Jan 2, 2019\"\n\n## Site Meta Settings\n[params.meta]\ndescription = \"Person Blog\"\nkeywords = \"portfolio,blog,developer\"\n\n## Social Accounts\n[params.social]\ngithub = \"kono94\"\nxing = \"&lt;username&gt;\"\nlinkedin = \"&lt;username&gt;\"\n#twitter = \"&lt;username&gt;\"\n#stackoverflow = \"&lt;username&gt;\"\n#bitbucket = \"&lt;username&gt;\"\n#steam = \"&lt;username&gt;\"\nemail = \"jan@lwenstrom.net\"\n\n## Extras\n[params.extra]\n#copyright = \"\u00a9 2016. Erlich Bachman. [Some Rights Reserved](http://creativecommons.org/licenses/by/3.0/).\"\npoweredby = true\nhighlightjs = true\nsocialmarkup = true\ntoc = true\ndisplayrssicon = true\n\n## Main Menu\n[[menu.main]]\n    name = \"blog\"\n    weight = 100\n    identifier = \"blog\"\n    url = \"/blog/\"\n[[menu.main]]\n    name = \"about\"\n    identifier = \"about\"\n    weight = 200\n    url = \"/about/\"\n[[menu.main]]\n    name = \"coderag\"\n    identifier = \"coderag\"\n    weight = 300\n    url = \"/coderag/\"\n</code></pre> <ol> <li>Add content:</li> </ol> <pre><code>hugo new blog/my-first-post.md\nhugo new about/about.md\nhugo new coderag/code-stuff.md\n</code></pre> <ol> <li>Start the hugo server and visit <code>localhost:1313</code> in your browser:</li> </ol> <pre><code>hugo server\n</code></pre> <ol> <li>Build your project and upload it to your host:</li> </ol> <pre><code>hugo &amp;&amp; rsync -avz  public/ ssh-alias:/home/jan/public\n</code></pre> <p> Done :D </p>","tags":["Go","Hugo"]},{"location":"archive/2020/","title":"2020","text":""},{"location":"category/programming/","title":"Programming","text":""},{"location":"category/tooling/","title":"Tooling","text":""},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#git","title":"Git","text":"<ul> <li>Useful Git Commands</li> <li>Locating and Removing Large Files from Git History</li> </ul>"},{"location":"tags/#gitlab","title":"Gitlab","text":"<ul> <li>Useful Git Commands</li> <li>Locating and Removing Large Files from Git History</li> </ul>"},{"location":"tags/#go","title":"Go","text":"<ul> <li>Setting up Personal Blog with Hugo (Go)</li> </ul>"},{"location":"tags/#hugo","title":"Hugo","text":"<ul> <li>Setting up Personal Blog with Hugo (Go)</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>Locating and Removing Large Files from Git History</li> </ul>"},{"location":"tags/#mac","title":"Mac","text":"<ul> <li>Locating and Removing Large Files from Git History</li> </ul>"}]}